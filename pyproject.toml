[project]
name = "backend"
version = "0.1.0"
description = "A backend for a web app"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "alembic>=1.14.0",
    "fastapi[standard]==0.115.6",
    "cryptography>=44.0.0",
    "passlib[bcrypt]>=1.7.4",
    "pydantic>=2.10.3",
    "pyjwt>=2.10.1",
    "sqlalchemy[asyncio]>=2.0.36",
    "asyncmy>=0.2.10",
    "aiocache>=0.12.3",
]

[dependency-groups]
dev = [
    "ruff>=0.8.1",
    "pre-commit>=4.0.1",
    "faker>=33.1.0",
    "pyright>=1.1.392.post0",
    "mypy>=1.14.1",
]
test = [
    "pytest-asyncio>=0.24.0",
    "pytest>=8.3.4",
    "httpx>=0.28.0",
]

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3



[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["**/tests*"]
addopts = "-ra --tb=auto --disable-warnings --log-level=CRITICAL"



[tool.codespell]
# ignore-words = ["selectin"]

[tool.ruff]
lint.select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "D", # pydocstyle
    "DJ", # flake8-django
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F", # pyflakes
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle - warning
    "YTT", # flake8-2020
]
lint.ignore = [
    "E501", # pycodestyle line too long, handled by black
    "D100", # pydocstyle - missing docstring in public module
    "D101", # pydocstyle - missing docstring in public class
    "D102", # pydocstyle - missing docstring in public method
    "D103", # pydocstyle - missing docstring in public function
    "D104", # pydocstyle - missing docstring in public package
    "D105", # pydocstyle - missing docstring in magic method
    "D106", # pydocstyle - missing docstring in public nested class
    "D107", # pydocstyle - missing docstring in __init__
    "D202", # pydocstyle - no blank lines allowed after function docstring
    "D205", # pydocstyle - 1 blank line required between summary line and description
    "D415", # pydocstyle - first line should end with a period, question mark, or exclamation point
    "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010", # flake8-bugbear - do not call setattr with a constant attribute value
    "RUF012", # Ruff-specific rule
    "S101", # flake8-bandit - use of assert
    "ISC001",
]
unsafe-fixes = true
line-length = 120
src = ["app", "tests"]
target-version = "py312"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["app", "tests"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "sqlalchemy.orm.declared_attr.directive",
]

[tool.ruff.lint.per-file-ignores]
"examples/tests/**/*.*" = ["S101"]
"app/lib/dependencies.py" = ["B008"]
"tests/**/*.*" = ["S101", "DTZ"]

[tool.mypy]
plugins = ['pydantic.mypy']
